#version 430

#include "constantbuffers.glsl"
#include "terrainRenderData.glsl"

layout(location = 0) in ContInVertex In[];
layout(location = 0) out EvalInVertex Out[];

// Output quads
layout(vertices = 3) out;

// TODO
// Estimates the size of a sphere around a given world space edge
float EstimateSphereSizeAroundEdge(vec3 p0, vec3 p1)
{	
	float diameter = distance(p0, p1);
	vec3 edgeMid = (p1 + p0) * 0.5f;

	vec3 camXRadius = diameter * vec3(ViewMatrix[0].x, ViewMatrix[1].x, ViewMatrix[2].x);
	vec2 clip0 = (ViewProjection * vec4(edgeMid, 1.0f)).xw;
	vec2 clip1 = (ViewProjection * vec4(edgeMid + camXRadius, 1.0f)).xw;

	return abs(clip0.x / clip0.y - clip1.x / clip1.y);
};


/*
bool InFrustum(vec3 p, float margin)
{
	// function based on NVIDIA's TerrainTessellation Sample

	vec3 cameraToPoint = p - CameraPosition;
	if(length(cameraToPoint) < margin)
		return true;

	vec3 projectedToCameraViewDir = ViewMatrix[2].xyz * dot(cameraToPoint, ViewMatrix[2].xyz);
	vec3 pointToCameraViewDir = projectedToCameraViewDir - cameraToPoint;	// direction to point projected onto cameradirection
	float pointToCameraViewDir_length = length(pointToCameraViewDir);
	pointToCameraViewDir /= pointToCameraViewDir_length;

	// that is now the point nearest to the camera direction ("most visible")
	vec3 realignedPoint = p + pointToCameraViewDir * min(margin, pointToCameraViewDir_length);
	vec4 realignedPoint_projected = ViewProjection * vec4(realignedPoint, 1.0f);

	if(any(lessThan(realignedPoint_projected.xyz, vec3(-realignedPoint_projected.w))) ||
	   any(greaterThan(realignedPoint_projected.xyz, vec3(realignedPoint_projected.w))) )
	{
		return false;
	}
	
	return true;
};
*/

void main()
{
	// Per Patch computation.
	if (gl_InvocationID == 0)
	{	
		vec3 mid = 0.25f * (In[0].WorldPos + In[1].WorldPos + In[2].WorldPos);
		//float size = max(distance(In[0].WorldPos, In[2].WorldPos), distance(In[1].WorldPos, In[3].WorldPos));

		// Frustum culling
		if(true) //InFrustum(mid, size))
		{
			for(int i=0; i<3; ++i)	// unroll in ogl 4.3?
			{
				int second = (i+1) % 3;
				gl_TessLevelOuter[(i+2)%3] = clamp(EstimateSphereSizeAroundEdge(In[i].WorldPos, In[second].WorldPos) * TrianglesPerClipSpaceUnit,
											1.0f, MaxTesselationFactor);
			}
			gl_TessLevelInner[0] = (gl_TessLevelOuter[0] + gl_TessLevelOuter[1] + gl_TessLevelOuter[2]) * 0.25f; 
		}
		else
		{
			gl_TessLevelOuter[0] = gl_TessLevelOuter[1] = gl_TessLevelOuter[2] = -1.0f;
		}
		

		// Debug: No Tess
		//gl_TessLevelOuter[0] = gl_TessLevelOuter[1] = gl_TessLevelOuter[2] = 1.0f;
		//gl_TessLevelInner[0] = 1.0f;
    }

    Out[gl_InvocationID].WorldPos2D = In[gl_InvocationID].WorldPos.xz;
    Out[gl_InvocationID].HeightmapCoord = In[gl_InvocationID].HeightmapCoord;
}